import sric::*;
import jsonc::*;

unsafe fun sizeOfType(typeName: raw* const Int8): Int {
    switch (typeName[0]) {
        case 'I':
            if (strcmp(typeName, "Int") == 0 || strcmp(typeName, "Int32") == 0) {
                return sizeof(Int);
            }
            else if (strcmp(typeName, "Int64") == 0) {
                return sizeof(Int64);
            }
            else if (strcmp(typeName, "Int16") == 0) {
                return sizeof(Int16);
            }
            else if (strcmp(typeName, "Int8") == 0) {
                return sizeof(Int8);
            }
        case 'U':
            if (strcmp(typeName, "UInt32") == 0) {
                return sizeof(UInt8);
            }
            else if (strcmp(typeName, "UInt64") == 0) {
                return sizeof(UInt64);
            }
            else if (strcmp(typeName, "UInt16") == 0) {
                return sizeof(UInt16);
            }
            else if (strcmp(typeName, "UInt8") == 0) {
                return sizeof(UInt8);
            }
        case 'F':
            if (strcmp(typeName, "Float") == 0) {
                return sizeof(Int32);
            }
            else if (strcmp(typeName, "Float64") == 0) {
                return sizeof(Int64);
            }
            else if (strcmp(typeName, "Float32") == 0) {
                return sizeof(Int32);
            }
        case 's':
            if (strcmp(typeName, "sric::String") == 0) {
                return sizeof(String);
            }
            // else if (strcmp(typeName, "raw* Int8") == 0) {
            //     var v = (obj+offset) as raw* raw*? Int8;
            //     fnode = allocator.alloc_str(*v);
            // }
            else if (strcmp(typeName, "sric::DArray") == 0) {
                return sizeof(DArray$<Int8>);
            }
        case 'o':
            if (strcmp(typeName, "own*") == 0) {
                return sizeof(own*Void);
            }
    }
    return -1;
}

unsafe fun findRType(typeQname:raw* const Int8): raw*? const RType {
    var name: String = typeQname;
    var fs = name.split("::");
    if (fs.size() != 2) {
        return null;
    }

    var ns = fs[0];
    var typeName = fs[1];
    var module = findModule(ns.c_str());
    if (module == null) {
        //scError("serial", "unknow module: %s", ns.c_str());
        return null;
    }
    var rtype: *? const RType;
    for (var i=0; i<module.types.size(); ++i) {
        if (strcmp(module.types[i].name, typeName.c_str()) == 0) {
            rtype = module.types.constGetPtr(i);
            break;
        }
    }
    return rtype;
}

fun isSimpleSerial(f: &const RType): Bool {
    if (f.comments.size() > 0) {
        for (var j = 0; j<f.comments.size(); ++j) {
            if (strcmp(f.comments[j].content, "SimpleSerial") == 0) {
                return true;
            }
        }
    }
    return false;
}

fun isSerializable(f: &const RField): Bool {
    if ((f.flags & RFlags::Static) != 0) {
        return false;
    }

    if (f.comments.size() > 0) {
        for (var j = 0; j<f.comments.size(); ++j) {
            if (strcmp(f.comments[j].content, "Transient") == 0) {
                return false;
            }
        }
    }
    return true;
}

struct TypeName {
    var name: String;
    var genericArgs: DArray$<TypeName>;

    static fun parse(name: raw* const Int8): TypeName {
        var parser : TypeNameParser;
        return parser.parse(name);
    }
}

private struct TypeNameParser {
    private var buf: raw* const Int8;
    private var pos: Int = 0;
    private var len: Int = 0;

    fun parse(name: raw* const Int8) : TypeName {
        buf = name;
        len = strlen(name);
        unsafe {
            return parseType();
        }
    }

    private unsafe fun parseType(): TypeName {
        var type: TypeName;
        while (pos < len) {
            var ch = buf[pos];
            if (ch == '<') {
                ++pos;

                while (pos < len && buf[pos] != '>') {
                    type.genericArgs.add(parseType());
                    if (pos < len && buf[pos] == ',') {
                        ++pos;
                    }
                    else {
                        break;
                    }
                }

                ++pos;
                break;
            }
            else if (ch == '>') {
                break;
            }
            else {
                type.name.addChar(buf[pos]);
                ++pos;
            }
        }
        return type;
    }
}

unsafe fun findRMethod(rtype: raw*? const RType, name: raw* const Int8): raw*? const RFunc {
    if (rtype == null) {
        return null;
    }
    if (rtype.flags & RFlags::Reflect == 0) {
        return null;
    }

    for (var i = 0; i<rtype.funcs.size(); ++i) {
        var f = rtype.funcs.constGetPtr(i);
        if (strcmp(f.name, name) == 0) {
            return f;
        }
    }

    if (rtype.superType != null) {
        var superType = findRType(rtype.superType);
        return findRMethod(superType, name);
    }
    return null;
}

unsafe fun findRField(rtype: raw*? const RType, name: raw* const Int8): raw*? const RField {
    if (rtype == null) {
        return null;
    }
    if (rtype.flags & RFlags::Reflect == 0) {
        return null;
    }

    for (var i = 0; i<rtype.fields.size(); ++i) {
        var f = rtype.fields.constGetPtr(i);
        if (strcmp(f.name, name) == 0) {
            return f;
        }
    }

    if (rtype.superType != null) {
        var superType = findRType(rtype.superType);
        return findRField(superType, name);
    }
    return null;
}