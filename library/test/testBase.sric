import sric::*;

fun testCopy() {
    var a = DArray$<own*Int> { .add(new Int); };
    var p = DArray$<Int> { .add(1); };
    var i = 1;
    var s: String = "a";

    var a1 = copy(a);
    var p1 = copy(p);
    var i1 = copy(i);
    var s1 = copy(s);

    verify(a1[0] == a[0]);
    verify(p1[0] == p[0]);
    verify(i1 == i);
    verify(s1 == s);
}

var globalValue : const Int = 1;
fun testGlobal() {
    printf("%d\n", globalValue);
    verify(globalValue == 1);
}

constexpr var arraySize : const Int = 10;

fun testArray() {
    var a  = []Int {1,2,3,4};
    for (var i = 0; i<4; ++i) {
        var v = a[i];
        printf("%d\n", v);
    }

    var p: raw* Int = &a;
    for (var i = 0; i<4; ++i) {
        unsafe {
            var v = p[i];
            printf("%d\n", v);
        }
    }

    verify(a[0] == 1);

    var b: [arraySize]Int = uninit;
    b[0] = 1;

    verify(b[0] == 1);

    // passArray(a);
}

//TODO
// fun passArray(a: [5]Int) {
//     verify(a[0] == 1);
// }

fun testString() {
    var cstr = "Hello";
    var str = asStr(cstr);
    str.add("World");

    printf("%s\n", str.c_str());

    verify(str == "HelloWorld");
}

fun testStrlen() {
    var cstr = "Hi";
    var len = strlen(cstr);
    var s: size_t = len;
    verify(s == 2, "error");
}