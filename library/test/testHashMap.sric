import sric::*;

fun testHashMap() {
    var map = HashMap$<String, Int>{};
    map.set("1", 1);
    map.set("2", 2);

    var i =  map.getPtr("1");
    printf("%d\n", *i);
    verify(map.size() == 2);
    verify(map["1"] == 1);    
}

fun testHashMap2() {
    var map = HashMap$<Int, String>{};
    map.set(1, "1");
    map.set(2, "2");

    printf("%s\n", map[1].c_str());

    verify(map.size() == 2);
    verify(map[2] == "2");
}

fun testHashMap3() {
    var map = HashMap$<String, Int>{};

    for (var i=0; i<10; ++i) {
        map.set(String::fromInt32(i), i);
    }

    var t =  map.getPtr("1");
    printf("%d\n", *t);

    verify(map.size() == 10);
    verify(map["9"] == 9);

    var s = 0;
    var p = &s;
    map.eachWhile(fun(v:& const Int, k:& const String): Bool {
        //printf("%d:%s\n", v, k.c_str());
        verify( v == k.toInt32());
        
        *p = *p+1;
        return true;
    });
    verify(s == 10);
}

fun testHashMap4() {
    var map = HashMap$<String, own*? Int>{};

    for (var i=0; i<10; ++i) {
        var p = new Int;
        *p = i;
        map.set(String::fromInt32(i), move p);
    }

    var t =  map.getPtr("1");
    printf("%d\n", **t);

    verify(map.size() == 10);
    verify(*(map["9"]) == 9);

    map.eachWhile(fun(v:& const own*? Int, k:& const String): Bool {
        //printf("%d:%s\n", *v, k.c_str());
        verify( *v == k.toInt32());
        return true;
    });
}

fun testHashMapAll() {
    testHashMap();
    testHashMap2();
    testHashMap3();
    testHashMap4();
}