
import sric::*;
import cstd::*;

virtual struct A {
    var i: Int = 1;
    var k: Int = 2;

    operator fun compare(b: & A) : Int {
        return i - b.i;
    }
}


struct CP {
    var p: own*? Int;
}

fun testA(a: * A) {
    printf("%d\n", a.i);
}

fun testDerivativePtr() {
    var p: own*? A = new A;
    var p2: * Int = &p.k;

    printf("%d\n", *p2);
}

fun testDerivativeRefable() {
    var a: A = A{};
    var p2: * Int = &a.k;

    printf("%d\n", *p2);
}

fun testRefable() {
    var i: Int = 1;
    var a: A = uninit;
    a.i = i + 1;
    testA(&a);
    var b: A = a;
    var c: A = b;
    a = c;
    b = a;
}

fun testPtr() {
    var p: own*? A = new A;
    testA(p);

    if (p != null) {
        printf("%d\n", p.i);
    }

    var rp: * A = p;
    p = null;
    //printf("%d\n", rp.i);
}

fun testUniqPtr() {
    var p: uniq*? A = makeUniq$<A>();
    testA(p);

    if (p != null) {
        printf("%d\n", p.i);
    }

    var rp: * A = p;
    var p2 = move p;
    p2 = null;
    //printf("%d\n", rp.i);
}

fun testShare() {
    var p: own* A = new A;
    var p2: own* A = share(p);
}

fun testNullable() {
    var p: *? A = null;
    var i = p.i;
}

fun testCompare() {
    var a = A { .i = 1; };
    var b = A { .i = 2; };
    if (a < b) {
        printf("compare OK\n");
    }
}

fun testMove() {
    var b: CP = uninit;
    var a = move b;
}

fun testRaw() {
    var a = 1;
    var p: raw* Int = &a;
    unsafe {
        var p1 = p + 1;
        p1 = p1 - 1;
        *p1 = 2;
    }
    printf("%d\n", a);
}

fun testVoidPtr() {
    var p : own* A = new A;
    var p2 : own* Void = move p ;
    var p3: * Void = p2;

    //TODO
    //var pa = p2 as *? A;
    //var pe = p2 as *? Int;
    //verify(pa != null);
    //verify(pe == null);
}

fun testRawCast() {
    var p : own* A = new A;
    //var a : A;
    var r : A;

    var p1 : raw* A = p;
    var p2 = rawToRef(p1);
    
    var r1 : raw* A = &r;
    var r2 = rawToRef(r1);
}


fun testPtrAll() {
    testPtr();
    testCompare();
    testMove();
    testRaw();
    testDerivativePtr();
    testDerivativeRefable();
    testVoidPtr();
    testRawCast();
    testShare();
    testRefable();
    testUniqPtr();
}