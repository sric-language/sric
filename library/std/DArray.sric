//@#include "sric/DArray.h"

/**
* A Inteface for DArray for dynamic reflection
*/
extern trait List {
    abstract fun data(): raw* Void;
    abstract fun size() const : Int;
    abstract fun clear();
    abstract fun resize(size: Int);
}

/**
* Dynamic Array. DArray is a sequence container that encapsulates dynamic size arrays.
*/
extern noncopyable struct DArray$<T> : List {
    fun data(): raw* Void;

    fun size() const : Int;

    fun add(d: T);
    fun pop(): T;

    operator fun get(i: Int): & T;

    fun constGet(i: Int) const: & const T;
    fun at(i: Int): & T;

    fun getPtr(i: Int): * T;
    fun constGetPtr(i: Int) const: * const T;
    
    operator fun set(i: Int, d: T);

    fun clear();
    fun resize(size: Int);
    fun reserve(capacity: Int);

    fun removeAt(i: Int);
    fun removeRange(begin: Int, end: Int);

    fun swap(t: &DArray$<T>);

    fun isEmpty() const: Bool;

    fun insert(i: Int, d: T);
    fun insertAll(i: Int, t: DArray$<T>);

    fun copy() const : DArray$<T>;
}
