import sric::*;
import serial::*;

reflect struct Point {
    var x: Int;
    var y: Float;
}

reflect struct Elem {
    var name : String;
    var position: Point;
    //@Transient
    var size: Int;
    var point: own*? Point;
    static var s : const Int = 0;

    fun _isTransient(): Bool {
        return false;
    }
}

reflect enum Color {
    Red, Green, Blue
}

reflect struct Elem2 {
    var line: DArray$<own*? Point>;
}

reflect struct Elem3 {
    var color: Color;
}

reflect struct Elem4 {
    var children: DArray$<Int>;
}

//@SimpleSerial
reflect struct Insets {
    var top: Int = 0;
    var right: Int = 0;
    var bottom: Int = 0;
    var left: Int = 0;

    fun toString() : String {
        return String::format("%d %d %d %d", top, right, bottom, left);
    }

    fun fromString(str: String): Bool {
        var fs = str.split(" ");
        if (fs.size() == 4) {
            top = fs[0].toInt32();
            right = fs[1].toInt32();
            bottom = fs[2].toInt32();
            left = fs[3].toInt32();
            return true;
        }
        return false;
    }
}

reflect struct Elem5 {
    var padding: Insets;
}

reflect trait I {
}

reflect struct A : I {
    var a: Int;
}

reflect struct Elem6 {
    var i : own*? I;
}

unsafe fun testSimple() {
    var encoder: Encoder;
    var obj = new Point { .x = 1; .y = 2; };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Point");
    printf("%s\n", res.c_str());

    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2: raw* Point = unsafeCast$<raw*Point>(p);
    
    verify(obj2.x == obj.x);
    verify(obj2.y == obj.y);
}

unsafe fun testStruct() {
    var encoder: Encoder;
    var obj = new Elem { .name = "abc"; .position = Point {.x =1; .y=2; }; .size = 3; .point = new Point { .x = 4; .y = 5; }; };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Elem");
    printf("%s\n", res.c_str());

    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2 = unsafeCast$<raw*Elem>(p);
    
    verify(obj2.position.x == obj.position.x);
    verify(obj2.point.y == obj.point.y);
}

unsafe fun testArray() {
    var encoder: Encoder;
    var obj = new Elem2 { .line.add(new Point { .x = 1; .y = 2; }); .line.add(new Point { .x = 4; .y = 5; }); };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Elem2");
    printf("%s\n", res.c_str());

    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2 = unsafeCast$<raw*Elem2>(p);
    
    verify(obj2.line.size() == 2);
    verify(obj2.line[0].x == 1);
}

unsafe fun testEnum() {
    var encoder: Encoder;
    var obj = new Elem3 { .color = Color::Blue; };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Elem3");
    printf("%s\n", res.c_str());

    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2 = unsafeCast$<raw*Elem3>(p);
    
    verify(obj2.color == Color::Blue);
}

unsafe fun testArray2() {
    var encoder: Encoder;
    var obj = new Elem4 { .children.add(1); .children.add(2); };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Elem4");
    printf("%s\n", res.c_str());

    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2 = unsafeCast$<raw*Elem4>(p);
    
    verify(obj2.children.size() == 2);
    verify(obj2.children[0] == 1);
}

unsafe fun testSimpleSerial() {
    var encoder: Encoder;
    var obj = new Elem5 { .padding.top = 1; .padding.right = 2; .padding.bottom = 3; .padding.left = 4; };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Elem5");
    printf("%s\n", res.c_str());

    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2 = unsafeCast$<raw*Elem5>(p);
    
    verify(obj2.padding.top == 1);
    verify(obj2.padding.right == 2);
    verify(obj2.padding.bottom == 3);
    verify(obj2.padding.left == 4);
}

unsafe fun testTrait() {
    var encoder: Encoder;
    var obj = new Elem6 { .i = new A {.a = 1;}; };
    var t = obj as *Void;
    var res = encoder.encode(t, "testSerial::Elem6");
    printf("%s\n", res.c_str());

    //var str = "testSerial::Elem6 { i = testSerial::A }";
    var decoder: Decoder;
    var p = decoder.decode(res);
    var obj2 = unsafeCast$<raw*Elem6>(p);
    
    verify(obj2.i == null);
}

unsafe fun main(): Int {
    testSimple();
    testStruct();
    testArray();
    testEnum();
    testArray2();
    testSimpleSerial();
    testTrait();
    return 0;
}