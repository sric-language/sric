
private struct MapEntry$<K, V> {
    var k: K;
    var v: V;
    var next: own*? MapEntry$<K, V>;
    var previous: *? MapEntry$<K, V>;
}

private struct MapEntryList$<K, V> {
    var list: LinkedList$<MapEntry$<K,V>>;
}

/**
* HashMap is an associative container that contains key-value pairs with unique keys. Search, insertion, and removal of elements have average constant-time complexity.
*/
struct HashMap$<K, V> {
    private var table: DArray$<MapEntryList$<K,V>> = DArray$<MapEntryList$<K,V>>{ .resize(4); };
    //static var defValue: const refable V;
    private var length: Int = 0;
    
    private fun constGetEntryList(k: & const K) const : * const MapEntryList$<K,V> {
        var h = hashCode$<K>(k);
        h %= table.size();
        return table.constGetPtr(h);
    }

    private fun getEntryList(k: & const K) : * MapEntryList$<K,V> {
        var h = hashCode$<K>(k);
        h %= table.size();
        return table.getPtr(h);
    }

    fun constGet(k: &const K): *? const V {
        var list = constGetEntryList(k);
        for (var itr = list.list.constFirst(); itr != null; itr = itr.next) {
            if (compare$<K>(itr.k, k) == 0) {
                return &itr.v;
            }
        }
        return null;
    }

    fun getPtr(k: &const K): *? V {
        var list = getEntryList(k);
        for (var itr = list.list.first(); itr != null; itr = itr.next) {
            if (compare$<K>(itr.k, k) == 0) {
                return &itr.v;
            }
        }
        return null;
    }

    operator fun get(k: K): & V {
        var list = getEntryList(k);
        for (var itr = list.list.first(); itr != null; itr = itr.next) {
            if (compare$<K>(itr.k, k) == 0) {
                unsafe {
                    return itr.v;
                }
            }
        }
        var defValue: V;
        set(move k, move defValue);
        unsafe {
            return get(move k);
        }
    }
    
    operator fun set(k: K, v: V) : Bool {
        var list = getEntryList(k);
        for (var itr = list.list.first(); itr != null; itr = itr.next) {
            if (compare$<K>(itr.k, k) == 0) {
                itr.v = move v;
                return false;
            }
        }
        var entry = new MapEntry$<K,V> { .k = move k; .v = move v; };
        list.list.add(move entry);
        ++length;
        rehash();
        return true;
    }
    
    fun size() const : Int {
        return length;
    }

    fun clear() {
        for (var i=0; i<table.size(); ++i) {
            table[i].list.clear();
        }
        length = 0;
    }
    
    fun remove(k: &const K) : Bool {
        var list = getEntryList(k);
        for (var itr = list.list.first(); itr != null; itr = itr.next) {
            if (compare$<K>(itr.k, k) == 0) {
                list.list.remove(itr);
                ++length;
                return true;
            }
        }
        return false;
    }
    
    fun contains(k: &const K) const : Bool {
        var list = constGetEntryList(k);
        for (var itr = list.list.constFirst(); itr != null; itr = itr.next) {
            if (compare$<K>(itr.k, k) == 0) {
                return true;
            }
        }
        return false;
    }
    
    /**
    * Return true to continue, Return false to break.
    */
    fun eachWhile(f: fun(v:& const V, k:& const K):Bool) const {
        for (var i = 0; i<table.size(); ++i) {
            var list = table.constGetPtr(i);
            for (var itr = list.list.constFirst(); itr != null; itr = itr.next) {
                if (!f(itr.v, itr.k)) {
                    return;
                }
            }
        }
    }

    private fun rehash() {
        if (length < table.size()) {
            return;
        }
        var newSize = length < 256 ? length*2+8 : (length*1.5) as Int;
        var otable = DArray$<MapEntryList$<K,V>>{ .resize(newSize); };
        otable.swap(this.table);
        length = 0;

        for (var i = 0; i<otable.size(); ++i) {
            var list = otable.getPtr(i);
            for (var itr = list.list.first(); itr != null; itr = itr.next) {
                set(move itr.k, move itr.v);
            }
        }
    }
}